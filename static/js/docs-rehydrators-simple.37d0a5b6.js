(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"./docs/rehydrators/simple.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function m(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"a-simple-rehydrator"}},"A simple rehydrator"),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"A working version of this can be seen in the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/demo/ShowMoreText"}},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"ShowMoreText")," demo"))),o.a.createElement(r.MDXTag,{name:"p",components:n},"The simplest rehydrators work on ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"leaf components")," - in other words, a React component that doesn't use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"this.props.children"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Suppose you had a component called ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"ShowMore"),", which would hide or show a prop called ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"content")," when a button is clicked."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<ShowMore content="Hello, world!" />\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"The component definition might look like this:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'import React, { Component } from "react";\nimport PropTypes from "prop-types";\n\nexport default class ShowMore extends Component {\n  state = {\n    open: false\n  }\n\n  toggleOpen = () => {\n    this.setState({\n      open: !this.state.open\n    })\n  }\n\n  render() {\n    const { content } = this.props;\n    const { open } = this.state;\n\n    return (\n      <div \n        className="ShowMore"\n        data-rehydratable="ShowMore" \n        data-content={content}\n      >\n        <button onClick={this.toggleOpen}>Show more</button>\n        <p className="ShowMore-content" style={{ display: open ? "block" : "none" }}>{content}</p>\n      </div>\n    );\n  }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"The rehydrator for this is simply a function that reads an element where ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'data-rehydratable === "ShowMore"'),", and returna a React element, using the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"data-")," attributes to derive the right ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"props"),". It would look something like this:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'import ShowMore from "./ShowMore";\n\nexport default async domNode => {\n  const props = {\n    content: domNode.getAttribute("data-content")\n  };\n\n  return <ShowMore {...props} />;\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"In order to use this rehydrator, put it inside a ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/containers"}},"markup container")," and pass it to ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-from-markup")," when your page loads:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'import rehydrate from "react-from-markup";\nimport showMoreRehydrator from "./components/ShowMore/rehydrator";\n\nrehydrate(document.getElementById("root"), {\n  ShowMore: showMoreRehydrator\n});\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"avoiding-duplication"}},"Avoiding duplication"),o.a.createElement(r.MDXTag,{name:"p",components:n},"In the above example, the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"content")," prop exists in two places: in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"data-content")," attribute, and inside the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<p>")," element."),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you wanted to avoid this, you could read the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"innerText")," of the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"p")," instead, and get rid of the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"data-content")," attribute altogether:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},'import ShowMore from "./ShowMore";\n\nexport default async domNode => {\n  const props = {\n    content: domNode.querySelector(".ShowMore-content").innerText\n  };\n\n  return <ShowMore {...props} />;\n}\n')))}}}]);